from copy import copy

class Node:
    def __init__(self, val):
        self.val = val
        self.nodes = []

    def connect(self, node):
        self.nodes.append(node)

nodes = {
    'a': Node(0xe3),
    'b': Node(0x1f9),
    'c': Node(0x468),
    'd': Node(0x213),
    'e': Node(0x121),
    'f': Node(0x3a9),
    'g': Node(0x19a),
    'h': Node(0x13a),
    'i': Node(0x362),
    'j': Node(0x2c6)
}

nodes['a'].connect(nodes['c'])
nodes['a'].connect(nodes['g'])
nodes['b'].connect(nodes['e'])
nodes['b'].connect(nodes['d'])
nodes['c'].connect(nodes['d'])
nodes['c'].connect(nodes['g'])
nodes['d'].connect(nodes['i'])
nodes['d'].connect(nodes['d'])
nodes['e'].connect(nodes['f'])
nodes['e'].connect(nodes['h'])
nodes['f'].connect(nodes['a'])
nodes['f'].connect(nodes['f'])
nodes['g'].connect(nodes['j'])
nodes['g'].connect(nodes['a'])
nodes['h'].connect(nodes['a'])
nodes['h'].connect(nodes['j'])
nodes['i'].connect(nodes['j'])
nodes['i'].connect(nodes['b'])
nodes['j'].connect(nodes['j'])
nodes['j'].connect(nodes['d'])

def findPath(target, node, total=0, path=[]):
    if total + node.val == target:
        return path
    if total + node.val > target:
        return None
    for i,n in enumerate(node.nodes):
        pathCopy = copy(path)
        pathCopy.append(i)
        found = findPath(target, n, total + node.val, pathCopy)
        if found:
            return found

def convertToPath(path):
    for i,v in enumerate(path):
        path[i] = 'L'if v == 0 else 'R'
    return ''.join(path)

print(convertToPath(findPath(0x257b, nodes['a'])))
